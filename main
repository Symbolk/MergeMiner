import os
from git import Repo
from git import IndexFile
import tempfile
import subprocess
from constants import Constant
from util import Util


class GitService(object):
    def __init__(self, repo_dir, branch_name, result_dir):
        self.repo = Repo(repo_dir)
        self.branch = branch_name
        self.result_dir = result_dir

    def get_conflict_blobs(self, base_commit, ours_commit, theirs_commit):
        return IndexFile.from_tree(self.repo, base_commit, ours_commit, theirs_commit).unmerged_blobs()

    def get_file_content_under_commit(self, commit, file_path):
        return self.repo.git.show('{}:{}'.format(commit, file_path))

    def threeway_merge_file(self, base_file_path, ours_file_path, theirs_file_path):
        return subprocess.call(["git", "merge-file", "--diff3", ours_file_path, base_file_path, theirs_file_path])

    def collect_merge_scenrios(self, commit, unmerged_blobs):
        for relative_path in unmerged_blobs:
            if relative_path.endswith(".java"):
                base_path = os.path.join(self.result_dir, str(commit), Constant.BASE, relative_path)
                ours_path = os.path.join(self.result_dir, str(commit), Constant.OURS, relative_path)
                theirs_path = os.path.join(self.result_dir, str(commit), Constant.THEIRS, relative_path)
                git_merged_path = os.path.join(self.result_dir, str(commit), Constant.GIT, relative_path)

                for (stage, blob) in unmerged_blobs[relative_path]:
                    # save the three way file to temp files
                    if stage == 1:
                        base_content = blob.data_stream.read()
                        Util.save_to_file(base_path, base_content.decode("utf-8"))
                    if stage == 2:
                        ours_content = blob.data_stream.read()
                        Util.save_to_file(ours_path, ours_content.decode("utf-8"))
                        Util.save_to_file(git_merged_path, ours_content.decode("utf-8"))
                    if stage == 3:
                        theirs_content = blob.data_stream.read()
                        Util.save_to_file(theirs_path, theirs_content.decode("utf-8"))
                # save the manual merged result
                manual_path = os.path.join(self.result_dir, str(commit), Constant.MANUAL, relative_path)
                manual_content = self.get_file_content_under_commit(commit, relative_path)
                Util.save_to_file(manual_path,
                                  manual_content)
                # save the git merged result
                print(self.threeway_merge_file(base_path, git_merged_path, theirs_path))

    def collect(self, summary_path):
        # 1. find all merge commits, and parents and merge_base
        for commit in self.repo.iter_commits(self.branch):
            if (len(commit.parents) >= 2):
                merge_commit = commit
                # on ours, merge theirs
                ours_commit = merge_commit.parents[0]
                theirs_commit = merge_commit.parents[1]
                base_commit = self.repo.merge_base(ours_commit, theirs_commit)[0]
                # 2. get all unmerged java files
                unmerged_blobs = self.get_conflict_blobs(base_commit, ours_commit, theirs_commit)
                # 3. 3-way java files, re-merge with git, manual merged
                self.collect_merge_scenrios(merge_commit, unmerged_blobs)


def git(*args):
    return subprocess.check_call(['git'] + list(args))

if __name__ == "__main__":
    repo_name = "javaparser"
    branch_name = "master"
    git_url = "https://github.com/javaparser/javaparser.git"
    # windows
    repo_dir = "D:\\github\\repos\\" + repo_name
    result_dir = "D:\\github\\results\\" + repo_name
    # linux
    # repo_dir = "/home/github/repos/" + repo_name
    # result_dir = "/home/github/results" + repo_name

    summary_path = result_dir + "/merge_scenario.csv"

    if not os.path.exists(repo_dir):
        git("clone", git_url, repo_dir)

    if not os.path.exists(result_dir):
        os.mkdir(result_dir)

    if not os.path.isfile(summary_path):
        open_w = open(summary_path, "w")
        # header
        open_w.write(
            "merge commit; ours commit; theirs commit; merge base commit")
        open_w.close()

    git_service = GitService(repo_dir, branch_name, result_dir)

    git_service.collect(summary_path)
